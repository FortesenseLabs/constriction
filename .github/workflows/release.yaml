name: release

on:
  release:
    types: [created]

env:
  CARGO_TERM_COLOR: always

jobs:
  rust-test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Install latest stable Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Lint with rustfmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: -- --check

      - name: Lint with clippy
        uses: actions-rs/cargo@v1
        env:
          RUSTFLAGS: "-D warnings"
        with:
          command: clippy
          args: --all-targets --all-features

      - name: Test in development mode
        uses: actions-rs/cargo@v1.0.1
        env:
          RUSTFLAGS: "-D warnings"
        with:
          command: test
          toolchain: stable

      - name: Test in release mode
        uses: actions-rs/cargo@v1.0.1
        env:
          RUSTFLAGS: "-D warnings"
        with:
          command: test
          toolchain: stable
          args: --release

  python-test:
    runs-on: ${{ matrix.os }}
    needs: rust-test
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7, 3.8, 3.9]
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - name: Install latest stable Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build Python package
        run: poetry run maturin develop --release '--cargo-extra-args=--features pybindings'

      - name: pytest
        run: poetry run pytest tests/python

  python-doc:
    needs: python-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1

      - name: Set up Python 3.9
        uses: actions/setup-python@v1
        with:
          python-version: 3.9

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - name: Install latest stable Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: checkout website template
        run: |
          git clone https://github.com/bamler-lab/constriction.git --branch website-template --single-branch website
          rm -rf website/.git

      - name: generate license file
        run: |
          cargo install cargo-about
          cargo about generate --features=pybindings about.hbs > website/license.html
          wc -l website/license.html

      - name: generate python documentation
        run: |
          poetry run maturin develop '--cargo-extra-args=--features pybindings'
          poetry run python pythondoc.py website/apidoc/python

      - name: Deploy to gh-pages
        id: deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./website
          commit_message: Deploy

  rust-publish:
    if: startsWith(github.ref, 'refs/tags/')
    needs: python-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Publish on crates.io
        run: |
          cargo login ${{ secrets.CARGO }}
          cargo publish

  python-publish:
    needs: python-test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7, 3.8, 3.9]
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v1

      - name: Install latest stable Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry twine
          poetry install

      - name: Build Python package
        run: poetry run maturin build --release --no-sdist --strip --interpreter python '--cargo-extra-args=--features pybindings'

      - name: Cross-build for Apple Silicon
        if: matrix.os == 'macos-latest'
        env:
          MACOSX_DEPLOYMENT_TARGET: "10.9"
        run: |
          rustup target add aarch64-apple-darwin
          export PYO3_CROSS_LIB_DIR=/Users/runner/hostedtoolcache/Python/$(python -V | cut -d' ' -f2)/x64/lib
          echo "PYO3_CROSS_LIB_DIR: $PYO3_CROSS_LIB_DIR"
          ls -l $PYO3_CROSS_LIB_DIR
          echo grandparent:
          ls -l $PYO3_CROSS_LIB_DIR/../..
          echo "file $PYO3_CROSS_LIB_DIR/*.dylib:"
          file $PYO3_CROSS_LIB_DIR/*.dylib
          poetry run maturin build --release --universal2 --no-sdist --strip --interpreter python '--cargo-extra-args=--features pybindings'

      - name: List wheels (unix)
        if: matrix.os != 'windows-latest'
        run: find ./target/wheels/

      - name: List wheels (windows)
        if: matrix.os == 'windows-latest'
        run: dir target\wheels\

      - name: generate license file
        run: |
          cargo install cargo-about
          cargo about generate --features=pybindings about.hbs > LICENSE.html
          wc -l LICENSE.html

      - name: Add LICENSE.html to wheel (unix)
        if: matrix.os != 'windows-latest'
        run: for i in target/wheels/*.whl; do zip -ur $i LICENSE.html; done

      - name: Add LICENSE.html to wheel (windows)
        if: matrix.os == 'windows-latest'
        run: |
          [Reflection.Assembly]::LoadWithPartialName('System.IO.Compression.FileSystem') | Out-Null
          $zip = [System.IO.Compression.ZipFile]::Open("$(dir target\wheels\)", "Update")
          $FileName = [System.IO.Path]::GetFileName("LICENSE.html")
          [System.IO.Compression.ZipFileExtensions]::CreateEntryFromFile($zip, "LICENSE.html", $FileName, "Optimal") | Out-Null
          $Zip.Dispose()

      # Note: Windows doesn't support glob
      # https://stackoverflow.com/a/52481267/270334
      - name: Install wheel and upload (windows)
        if: matrix.os == 'windows-latest'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI }}
        run: |
          echo "Running: pip install $(dir target\wheels\)"
          pip install "$(dir target\wheels\)"
          python -c 'import constriction; print(constriction.__file__)'
          twine upload "$(dir target\wheels\)"

      - name: Install wheel and upload (unix)
        if: matrix.os != 'windows-latest'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI }}
        run: |
          for i in target/wheels/constriction*.whl; do
            echo "Running: pip install $i"
            pip install "$i"
            python -c 'import constriction; print(constriction.__file__)'
            echo "Running: pip uninstall -y $i"
            pip uninstall -y constriction
          done
          twine upload target/wheels/constriction*.whl

      - name: Github Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: target/wheels/constriction*.whl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
